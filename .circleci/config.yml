version: 2.1

orbs:
  ms-teams-notifier: oktapodia/ms-teams-notifier@3.0.0
  kubernetes: circleci/kubernetes@1.3.1

commands:
  destroy-environment:
    parameters:
      ID:
        type: string
    steps:
      - kubernetes/install-kubectl
      - run:
          name: Destroy Deployment
          when: on_fail
          command: |
            kubectl delete deploy devops-<< parameters.ID >>
            kubectl delete svc blue


jobs:
  build-server:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout
      - run:
          name: Lint dockerfile
          command: |
            wget -O ./hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            chmod +x ./hadolint
            ./hadolint server/Dockerfile
      - setup_remote_docker
      - run:
          name: Server build
          command: |
            cd server
            docker build -t cosmincaloian/devops-server:${CIRCLE_WORKFLOW_ID} .
      - ms-teams-notifier/report:
          only_on_fail: true
          webhook_url: $MS_TEAMS_WEBHOOK_URL
  scan-server:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Back-end scan
          command: |
            cd server
            docker build -t cosmincaloian/devops-server:${CIRCLE_WORKFLOW_ID} .
            docker run cosmincaloian/devops-server:${CIRCLE_WORKFLOW_ID} npm audit --audit-level=critical
      - ms-teams-notifier/report:
          only_on_fail: true
          webhook_url: $MS_TEAMS_WEBHOOK_URL
  push-images:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Push server image
          command: |
            cd server
            docker build -t cosmincaloian/devops-server:${CIRCLE_WORKFLOW_ID} .
            echo $DOCKER_HUB_PASS | docker login --username 'cosmincaloian' --password-stdin
            docker push cosmincaloian/devops-server:${CIRCLE_WORKFLOW_ID}
      - ms-teams-notifier/report:
          only_on_fail: true
          webhook_url: $MS_TEAMS_WEBHOOK_URL
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          no_output_timeout: 30m
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/deploy_eks.yml \
              --tags project=devops-proj \
              --stack-name "devops-proj-server" \
              --no-fail-on-empty-changeset
  deploy-blue:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run: sudo apt  install tar gzip -y
      - kubernetes/install-kubectl
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscli.zip"
            unzip awscli.zip
            sudo ./aws/install
      - run:
          name: Get prod eks
          command: |
            aws eks update-kubeconfig --region ${AWS_DEFAULT_REGION} --name devops-proj
      - kubernetes/create-or-update-resource:
          envsubst: true
          get-rollout-status: true
          resource-file-path: .circleci/files/blue.yml
          resource-name: deployment/devops-${CIRCLE_WORKFLOW_ID}
          show-kubectl-command: true
  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run: sudo apt  install tar gzip -y
      - kubernetes/install-kubectl
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscli.zip"
            unzip awscli.zip
            sudo ./aws/install
      - run:
          name: Get prod eks
          command: |
            aws eks update-kubeconfig --region ${AWS_DEFAULT_REGION} --name devops-proj
      - run:
          name: Backend smoke test.
          command: |
            kubectl get svc blue
            export SERVER_HOST=$(kubectl get svc blue -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
            export API_URL="http://${SERVER_HOST}:30304"
            echo "${API_URL}"
            sleep 60
            if curl "${API_URL}/poll" | grep "CircleCi"
            then
                exit 0
            else
                exit 1
            fi
      # - destroy-environment:
      #     ID: ${CIRCLE_WORKFLOW_ID}
  switch-blue-to-green:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run: sudo apt  install tar gzip -y
      - kubernetes/install-kubectl
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscli.zip"
            unzip awscli.zip
            sudo ./aws/install
      - run:
          name: Get prod eks
          command: |
            aws eks update-kubeconfig --region ${AWS_DEFAULT_REGION} --name devops-proj
      - kubernetes/create-or-update-resource:
          envsubst: true
          get-rollout-status: true
          resource-file-path: .circleci/files/green.yml
          resource-name: service/green
          show-kubectl-command: true
      # - destroy-environment:
      #     ID: ${CIRCLE_WORKFLOW_ID:0:7}
  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run: sudo apt  install tar gzip -y
      - kubernetes/install-kubectl
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscli.zip"
            unzip awscli.zip
            sudo ./aws/install
      - run:
          name: Get prod eks
          command: |
            aws eks update-kubeconfig --region ${AWS_DEFAULT_REGION} --name devops-proj
      - run:
          name: Clean
          command: |
            kubectl delete svc blue

workflows:
  default:
    jobs:
      - build-server
      - scan-server:
          requires: [build-server]
      - push-images:
          requires: [scan-server]
          filters:
            branches:
              only: [master]
      - deploy-infrastructure:
          requires: [push-images]
      - deploy-blue:
          requires: [deploy-infrastructure]
      - smoke-test:
          requires: [ deploy-blue ]
      - switch-blue-to-green:
          requires: [ smoke-test ]
      - cleanup:
          requires: [ switch-blue-to-green ]

