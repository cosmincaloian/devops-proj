version: 2.1

orbs:
  ms-teams-notifier: oktapodia/ms-teams-notifier@3.0.0
  kubernetes: circleci/kubernetes@1.3.1

jobs:
  build-server:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout
      - run:
          name: Lint dockerfile
          command: |
            wget -O ./hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            chmod +x ./hadolint
            ./hadolint server/Dockerfile
      - setup_remote_docker
      - run:
          name: Server build
          command: |
            cd server
            docker build -t cosmincaloian/devops-server:${CIRCLE_WORKFLOW_ID:0:7} .
      - ms-teams-notifier/report:
          only_on_fail: true
          webhook_url: $MS_TEAMS_WEBHOOK_URL
  scan-server:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Back-end scan
          command: |
            cd server
            docker build -t cosmincaloian/devops-server:${CIRCLE_WORKFLOW_ID:0:7} .
            docker run cosmincaloian/devops-server:${CIRCLE_WORKFLOW_ID:0:7} npm audit --audit-level=critical
      - ms-teams-notifier/report:
          only_on_fail: true
          webhook_url: $MS_TEAMS_WEBHOOK_URL
  push-images:
    docker:
      - image: cimg/go:1.17
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Push server image
          command: |
            cd server
            docker build -t cosmincaloian/devops-server:${CIRCLE_WORKFLOW_ID:0:7} .
            echo $DOCKER_HUB_PASS | docker login --username 'cosmincaloian' --password-stdin
            docker push cosmincaloian/devops-server:${CIRCLE_WORKFLOW_ID:0:7}
      - ms-teams-notifier/report:
          only_on_fail: true
          webhook_url: $MS_TEAMS_WEBHOOK_URL
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          no_output_timeout: 30m
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/deploy_eks.yml \
              --tags project=devops-proj \
              --stack-name "devops-proj-server" \
              --no-fail-on-empty-changeset
  deploy:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install tar gzip -y
      - kubernetes/install-kubectl
      - run:
          name: Get prod eks
          command: |
            aws eks update-kubeconfig --region ${AWS_DEFAULT_REGION} --name devops-proj
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: .circleci/files/deploy.yml
          resource-name: deployment/devops-deployment
          show-kubectl-command: true
  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y curl tar gzip curl
      - run:
          name: Install AWS CLI v2
          command: |
            sudo curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscli.zip"
            unzip awscli.zip
            sudo ./aws/install
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query "Reservations[*].Instances[*].[PublicIpAddress]" \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            sleep 2
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment:
          WorkFlowId: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          WorkFlowId: ${CIRCLE_WORKFLOW_ID:0:7}
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install tar gzip nodejs npm -y
      - attach_workspace:
          at: ~/
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
              echo OldWorkflowID: "${OldWorkflowID}"
            echo "${OldWorkflowID}" > ./oldWorkflowID.txt
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople
            echo Current WorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          WorkFlowId: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          WorkFlowId: ${CIRCLE_WORKFLOW_ID:0:7}
      - persist_to_workspace:
          root: ~/
          paths:
            - project/oldWorkflowID.txt
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install tar gzip -y
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(cat ./oldWorkflowID.txt)
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            ## Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(cat ./oldWorkflowID.txt)
            echo OldWorkflowID "${OldWorkflowID}"
            aws s3 ls
            if [ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]
            then
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name udapeople-bk-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name udapeople-fe-${OldWorkflowID}
            else
              echo "No infra"          
            fi

workflows:
  default:
    jobs:
      - build-server
      - scan-server:
          requires: [build-server]
      - push-images:
          requires: [scan-server]
          filters:
            branches:
              only: [master]
      - deploy-infrastructure:
          requires: [push-images]
      - deploy:
          requires: [deploy-infrastructure]
#      - smoke-test:
#          requires: [deploy-backend, deploy-frontend]
#      - cloudfront-update:
#          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]
